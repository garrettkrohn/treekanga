// Code generated by mockery v2.53.3. DO NOT EDIT.

package sesh

import mock "github.com/stretchr/testify/mock"

// MockSesh is an autogenerated mock type for the Sesh type
type MockSesh struct {
	mock.Mock
}

type MockSesh_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSesh) EXPECT() *MockSesh_Expecter {
	return &MockSesh_Expecter{mock: &_m.Mock}
}

// SeshConnect provides a mock function with given fields: seshName
func (_m *MockSesh) SeshConnect(seshName string) error {
	ret := _m.Called(seshName)

	if len(ret) == 0 {
		panic("no return value specified for SeshConnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(seshName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSesh_SeshConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SeshConnect'
type MockSesh_SeshConnect_Call struct {
	*mock.Call
}

// SeshConnect is a helper method to define mock.On call
//   - seshName string
func (_e *MockSesh_Expecter) SeshConnect(seshName interface{}) *MockSesh_SeshConnect_Call {
	return &MockSesh_SeshConnect_Call{Call: _e.mock.On("SeshConnect", seshName)}
}

func (_c *MockSesh_SeshConnect_Call) Run(run func(seshName string)) *MockSesh_SeshConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSesh_SeshConnect_Call) Return(_a0 error) *MockSesh_SeshConnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSesh_SeshConnect_Call) RunAndReturn(run func(string) error) *MockSesh_SeshConnect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSesh creates a new instance of MockSesh. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSesh(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSesh {
	mock := &MockSesh{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
