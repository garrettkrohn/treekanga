// Code generated by mockery v2.53.3. DO NOT EDIT.

package spinnerhuh

import mock "github.com/stretchr/testify/mock"

// MockHuhSpinner is an autogenerated mock type for the HuhSpinner type
type MockHuhSpinner struct {
	mock.Mock
}

type MockHuhSpinner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHuhSpinner) EXPECT() *MockHuhSpinner_Expecter {
	return &MockHuhSpinner_Expecter{mock: &_m.Mock}
}

// Action provides a mock function with given fields: _a0
func (_m *MockHuhSpinner) Action(_a0 func()) HuhSpinner {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Action")
	}

	var r0 HuhSpinner
	if rf, ok := ret.Get(0).(func(func()) HuhSpinner); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(HuhSpinner)
		}
	}

	return r0
}

// MockHuhSpinner_Action_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Action'
type MockHuhSpinner_Action_Call struct {
	*mock.Call
}

// Action is a helper method to define mock.On call
//   - _a0 func()
func (_e *MockHuhSpinner_Expecter) Action(_a0 interface{}) *MockHuhSpinner_Action_Call {
	return &MockHuhSpinner_Action_Call{Call: _e.mock.On("Action", _a0)}
}

func (_c *MockHuhSpinner_Action_Call) Run(run func(_a0 func())) *MockHuhSpinner_Action_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockHuhSpinner_Action_Call) Return(_a0 HuhSpinner) *MockHuhSpinner_Action_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHuhSpinner_Action_Call) RunAndReturn(run func(func()) HuhSpinner) *MockHuhSpinner_Action_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *MockHuhSpinner) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHuhSpinner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockHuhSpinner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockHuhSpinner_Expecter) Run() *MockHuhSpinner_Run_Call {
	return &MockHuhSpinner_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockHuhSpinner_Run_Call) Run(run func()) *MockHuhSpinner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHuhSpinner_Run_Call) Return(_a0 error) *MockHuhSpinner_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHuhSpinner_Run_Call) RunAndReturn(run func() error) *MockHuhSpinner_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Title provides a mock function with given fields: _a0
func (_m *MockHuhSpinner) Title(_a0 string) HuhSpinner {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Title")
	}

	var r0 HuhSpinner
	if rf, ok := ret.Get(0).(func(string) HuhSpinner); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(HuhSpinner)
		}
	}

	return r0
}

// MockHuhSpinner_Title_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Title'
type MockHuhSpinner_Title_Call struct {
	*mock.Call
}

// Title is a helper method to define mock.On call
//   - _a0 string
func (_e *MockHuhSpinner_Expecter) Title(_a0 interface{}) *MockHuhSpinner_Title_Call {
	return &MockHuhSpinner_Title_Call{Call: _e.mock.On("Title", _a0)}
}

func (_c *MockHuhSpinner_Title_Call) Run(run func(_a0 string)) *MockHuhSpinner_Title_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHuhSpinner_Title_Call) Return(_a0 HuhSpinner) *MockHuhSpinner_Title_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHuhSpinner_Title_Call) RunAndReturn(run func(string) HuhSpinner) *MockHuhSpinner_Title_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHuhSpinner creates a new instance of MockHuhSpinner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHuhSpinner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHuhSpinner {
	mock := &MockHuhSpinner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
