// Code generated by mockery v2.53.3. DO NOT EDIT.

package connector

import (
	common "github.com/garrettkrohn/treekanga/common"
	mock "github.com/stretchr/testify/mock"
)

// MockConnector is an autogenerated mock type for the Connector type
type MockConnector struct {
	mock.Mock
}

type MockConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnector) EXPECT() *MockConnector_Expecter {
	return &MockConnector_Expecter{mock: &_m.Mock}
}

// CursorConnect provides a mock function with given fields: c
func (_m *MockConnector) CursorConnect(c *common.AddConfig) {
	_m.Called(c)
}

// MockConnector_CursorConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CursorConnect'
type MockConnector_CursorConnect_Call struct {
	*mock.Call
}

// CursorConnect is a helper method to define mock.On call
//   - c *common.AddConfig
func (_e *MockConnector_Expecter) CursorConnect(c interface{}) *MockConnector_CursorConnect_Call {
	return &MockConnector_CursorConnect_Call{Call: _e.mock.On("CursorConnect", c)}
}

func (_c *MockConnector_CursorConnect_Call) Run(run func(c *common.AddConfig)) *MockConnector_CursorConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.AddConfig))
	})
	return _c
}

func (_c *MockConnector_CursorConnect_Call) Return() *MockConnector_CursorConnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnector_CursorConnect_Call) RunAndReturn(run func(*common.AddConfig)) *MockConnector_CursorConnect_Call {
	_c.Run(run)
	return _c
}

// GetZoxidePath provides a mock function with given fields: c
func (_m *MockConnector) GetZoxidePath(c *common.AddConfig) string {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetZoxidePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*common.AddConfig) string); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConnector_GetZoxidePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetZoxidePath'
type MockConnector_GetZoxidePath_Call struct {
	*mock.Call
}

// GetZoxidePath is a helper method to define mock.On call
//   - c *common.AddConfig
func (_e *MockConnector_Expecter) GetZoxidePath(c interface{}) *MockConnector_GetZoxidePath_Call {
	return &MockConnector_GetZoxidePath_Call{Call: _e.mock.On("GetZoxidePath", c)}
}

func (_c *MockConnector_GetZoxidePath_Call) Run(run func(c *common.AddConfig)) *MockConnector_GetZoxidePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.AddConfig))
	})
	return _c
}

func (_c *MockConnector_GetZoxidePath_Call) Return(_a0 string) *MockConnector_GetZoxidePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnector_GetZoxidePath_Call) RunAndReturn(run func(*common.AddConfig) string) *MockConnector_GetZoxidePath_Call {
	_c.Call.Return(run)
	return _c
}

// SeshConnect provides a mock function with given fields: c
func (_m *MockConnector) SeshConnect(c *common.AddConfig) {
	_m.Called(c)
}

// MockConnector_SeshConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SeshConnect'
type MockConnector_SeshConnect_Call struct {
	*mock.Call
}

// SeshConnect is a helper method to define mock.On call
//   - c *common.AddConfig
func (_e *MockConnector_Expecter) SeshConnect(c interface{}) *MockConnector_SeshConnect_Call {
	return &MockConnector_SeshConnect_Call{Call: _e.mock.On("SeshConnect", c)}
}

func (_c *MockConnector_SeshConnect_Call) Run(run func(c *common.AddConfig)) *MockConnector_SeshConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.AddConfig))
	})
	return _c
}

func (_c *MockConnector_SeshConnect_Call) Return() *MockConnector_SeshConnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnector_SeshConnect_Call) RunAndReturn(run func(*common.AddConfig)) *MockConnector_SeshConnect_Call {
	_c.Run(run)
	return _c
}

// VsCodeConnect provides a mock function with given fields: c
func (_m *MockConnector) VsCodeConnect(c *common.AddConfig) {
	_m.Called(c)
}

// MockConnector_VsCodeConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VsCodeConnect'
type MockConnector_VsCodeConnect_Call struct {
	*mock.Call
}

// VsCodeConnect is a helper method to define mock.On call
//   - c *common.AddConfig
func (_e *MockConnector_Expecter) VsCodeConnect(c interface{}) *MockConnector_VsCodeConnect_Call {
	return &MockConnector_VsCodeConnect_Call{Call: _e.mock.On("VsCodeConnect", c)}
}

func (_c *MockConnector_VsCodeConnect_Call) Run(run func(c *common.AddConfig)) *MockConnector_VsCodeConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.AddConfig))
	})
	return _c
}

func (_c *MockConnector_VsCodeConnect_Call) Return() *MockConnector_VsCodeConnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnector_VsCodeConnect_Call) RunAndReturn(run func(*common.AddConfig)) *MockConnector_VsCodeConnect_Call {
	_c.Run(run)
	return _c
}

// NewMockConnector creates a new instance of MockConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnector {
	mock := &MockConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
