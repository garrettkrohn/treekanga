// Code generated by mockery v2.46.3. DO NOT EDIT.

package filter

import (
	worktreeobj "github.com/garrettkrohn/treekanga/worktreeObj"
	mock "github.com/stretchr/testify/mock"
)

// MockFilter is an autogenerated mock type for the Filter type
type MockFilter struct {
	mock.Mock
}

// BranchExistsInSlice provides a mock function with given fields: _a0, _a1
func (_m *MockFilter) BranchExistsInSlice(_a0 []string, _a1 string) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BranchExistsInSlice")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetBranchMatchList provides a mock function with given fields: _a0, _a1
func (_m *MockFilter) GetBranchMatchList(_a0 []string, _a1 []worktreeobj.WorktreeObj) []worktreeobj.WorktreeObj {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBranchMatchList")
	}

	var r0 []worktreeobj.WorktreeObj
	if rf, ok := ret.Get(0).(func([]string, []worktreeobj.WorktreeObj) []worktreeobj.WorktreeObj); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]worktreeobj.WorktreeObj)
		}
	}

	return r0
}

// GetBranchNoMatchList provides a mock function with given fields: _a0, _a1
func (_m *MockFilter) GetBranchNoMatchList(_a0 []string, _a1 []worktreeobj.WorktreeObj) []worktreeobj.WorktreeObj {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBranchNoMatchList")
	}

	var r0 []worktreeobj.WorktreeObj
	if rf, ok := ret.Get(0).(func([]string, []worktreeobj.WorktreeObj) []worktreeobj.WorktreeObj); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]worktreeobj.WorktreeObj)
		}
	}

	return r0
}

// NewMockFilter creates a new instance of MockFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilter {
	mock := &MockFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
