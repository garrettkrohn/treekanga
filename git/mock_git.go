// Code generated by mockery v2.53.3. DO NOT EDIT.

package git

import (
	common "github.com/garrettkrohn/treekanga/common"
	mock "github.com/stretchr/testify/mock"
)

// MockGit is an autogenerated mock type for the Git type
type MockGit struct {
	mock.Mock
}

type MockGit_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGit) EXPECT() *MockGit_Expecter {
	return &MockGit_Expecter{mock: &_m.Mock}
}

// AddWorktree provides a mock function with given fields: c
func (_m *MockGit) AddWorktree(c *common.AddConfig) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for AddWorktree")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.AddConfig) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGit_AddWorktree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWorktree'
type MockGit_AddWorktree_Call struct {
	*mock.Call
}

// AddWorktree is a helper method to define mock.On call
//   - c *common.AddConfig
func (_e *MockGit_Expecter) AddWorktree(c interface{}) *MockGit_AddWorktree_Call {
	return &MockGit_AddWorktree_Call{Call: _e.mock.On("AddWorktree", c)}
}

func (_c *MockGit_AddWorktree_Call) Run(run func(c *common.AddConfig)) *MockGit_AddWorktree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.AddConfig))
	})
	return _c
}

func (_c *MockGit_AddWorktree_Call) Return(_a0 error) *MockGit_AddWorktree_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGit_AddWorktree_Call) RunAndReturn(run func(*common.AddConfig) error) *MockGit_AddWorktree_Call {
	_c.Call.Return(run)
	return _c
}

// CloneBare provides a mock function with given fields: _a0, _a1
func (_m *MockGit) CloneBare(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CloneBare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGit_CloneBare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneBare'
type MockGit_CloneBare_Call struct {
	*mock.Call
}

// CloneBare is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *MockGit_Expecter) CloneBare(_a0 interface{}, _a1 interface{}) *MockGit_CloneBare_Call {
	return &MockGit_CloneBare_Call{Call: _e.mock.On("CloneBare", _a0, _a1)}
}

func (_c *MockGit_CloneBare_Call) Run(run func(_a0 string, _a1 string)) *MockGit_CloneBare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGit_CloneBare_Call) Return(_a0 error) *MockGit_CloneBare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGit_CloneBare_Call) RunAndReturn(run func(string, string) error) *MockGit_CloneBare_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigureGitBare provides a mock function with given fields: path
func (_m *MockGit) ConfigureGitBare(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureGitBare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGit_ConfigureGitBare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureGitBare'
type MockGit_ConfigureGitBare_Call struct {
	*mock.Call
}

// ConfigureGitBare is a helper method to define mock.On call
//   - path string
func (_e *MockGit_Expecter) ConfigureGitBare(path interface{}) *MockGit_ConfigureGitBare_Call {
	return &MockGit_ConfigureGitBare_Call{Call: _e.mock.On("ConfigureGitBare", path)}
}

func (_c *MockGit_ConfigureGitBare_Call) Run(run func(path string)) *MockGit_ConfigureGitBare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGit_ConfigureGitBare_Call) Return(_a0 error) *MockGit_ConfigureGitBare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGit_ConfigureGitBare_Call) RunAndReturn(run func(string) error) *MockGit_ConfigureGitBare_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBranchRef provides a mock function with given fields: branch, path
func (_m *MockGit) DeleteBranchRef(branch string, path string) error {
	ret := _m.Called(branch, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBranchRef")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(branch, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGit_DeleteBranchRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBranchRef'
type MockGit_DeleteBranchRef_Call struct {
	*mock.Call
}

// DeleteBranchRef is a helper method to define mock.On call
//   - branch string
//   - path string
func (_e *MockGit_Expecter) DeleteBranchRef(branch interface{}, path interface{}) *MockGit_DeleteBranchRef_Call {
	return &MockGit_DeleteBranchRef_Call{Call: _e.mock.On("DeleteBranchRef", branch, path)}
}

func (_c *MockGit_DeleteBranchRef_Call) Run(run func(branch string, path string)) *MockGit_DeleteBranchRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGit_DeleteBranchRef_Call) Return(_a0 error) *MockGit_DeleteBranchRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGit_DeleteBranchRef_Call) RunAndReturn(run func(string, string) error) *MockGit_DeleteBranchRef_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalBranches provides a mock function with given fields: _a0
func (_m *MockGit) GetLocalBranches(_a0 *string) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLocalBranches")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_GetLocalBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalBranches'
type MockGit_GetLocalBranches_Call struct {
	*mock.Call
}

// GetLocalBranches is a helper method to define mock.On call
//   - _a0 *string
func (_e *MockGit_Expecter) GetLocalBranches(_a0 interface{}) *MockGit_GetLocalBranches_Call {
	return &MockGit_GetLocalBranches_Call{Call: _e.mock.On("GetLocalBranches", _a0)}
}

func (_c *MockGit_GetLocalBranches_Call) Run(run func(_a0 *string)) *MockGit_GetLocalBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *MockGit_GetLocalBranches_Call) Return(_a0 []string, _a1 error) *MockGit_GetLocalBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_GetLocalBranches_Call) RunAndReturn(run func(*string) ([]string, error)) *MockGit_GetLocalBranches_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteBranches provides a mock function with given fields: _a0
func (_m *MockGit) GetRemoteBranches(_a0 *string) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteBranches")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_GetRemoteBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteBranches'
type MockGit_GetRemoteBranches_Call struct {
	*mock.Call
}

// GetRemoteBranches is a helper method to define mock.On call
//   - _a0 *string
func (_e *MockGit_Expecter) GetRemoteBranches(_a0 interface{}) *MockGit_GetRemoteBranches_Call {
	return &MockGit_GetRemoteBranches_Call{Call: _e.mock.On("GetRemoteBranches", _a0)}
}

func (_c *MockGit_GetRemoteBranches_Call) Run(run func(_a0 *string)) *MockGit_GetRemoteBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *MockGit_GetRemoteBranches_Call) Return(_a0 []string, _a1 error) *MockGit_GetRemoteBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_GetRemoteBranches_Call) RunAndReturn(run func(*string) ([]string, error)) *MockGit_GetRemoteBranches_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoName provides a mock function with given fields: path
func (_m *MockGit) GetRepoName(path string) (string, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_GetRepoName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoName'
type MockGit_GetRepoName_Call struct {
	*mock.Call
}

// GetRepoName is a helper method to define mock.On call
//   - path string
func (_e *MockGit_Expecter) GetRepoName(path interface{}) *MockGit_GetRepoName_Call {
	return &MockGit_GetRepoName_Call{Call: _e.mock.On("GetRepoName", path)}
}

func (_c *MockGit_GetRepoName_Call) Run(run func(path string)) *MockGit_GetRepoName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGit_GetRepoName_Call) Return(_a0 string, _a1 error) *MockGit_GetRepoName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_GetRepoName_Call) RunAndReturn(run func(string) (string, error)) *MockGit_GetRepoName_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorktrees provides a mock function with no fields
func (_m *MockGit) GetWorktrees() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorktrees")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_GetWorktrees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorktrees'
type MockGit_GetWorktrees_Call struct {
	*mock.Call
}

// GetWorktrees is a helper method to define mock.On call
func (_e *MockGit_Expecter) GetWorktrees() *MockGit_GetWorktrees_Call {
	return &MockGit_GetWorktrees_Call{Call: _e.mock.On("GetWorktrees")}
}

func (_c *MockGit_GetWorktrees_Call) Run(run func()) *MockGit_GetWorktrees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGit_GetWorktrees_Call) Return(_a0 []string, _a1 error) *MockGit_GetWorktrees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_GetWorktrees_Call) RunAndReturn(run func() ([]string, error)) *MockGit_GetWorktrees_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveWorktree provides a mock function with given fields: _a0
func (_m *MockGit) RemoveWorktree(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWorktree")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_RemoveWorktree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWorktree'
type MockGit_RemoveWorktree_Call struct {
	*mock.Call
}

// RemoveWorktree is a helper method to define mock.On call
//   - _a0 string
func (_e *MockGit_Expecter) RemoveWorktree(_a0 interface{}) *MockGit_RemoveWorktree_Call {
	return &MockGit_RemoveWorktree_Call{Call: _e.mock.On("RemoveWorktree", _a0)}
}

func (_c *MockGit_RemoveWorktree_Call) Run(run func(_a0 string)) *MockGit_RemoveWorktree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGit_RemoveWorktree_Call) Return(_a0 string, _a1 error) *MockGit_RemoveWorktree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_RemoveWorktree_Call) RunAndReturn(run func(string) (string, error)) *MockGit_RemoveWorktree_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGit creates a new instance of MockGit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGit(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGit {
	mock := &MockGit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
